<?php/** * 0元淘商品管理 * * */defined('InSystem') or exit('Access Invalid!');class zero_goodsModel extends Model{    public function __construct(){        parent::__construct('zero_goods');    }    const STATE1 = 1;       // 出售中    const STATE0 = 0;       // 下架    const STATE10 = 10;     // 违规    const VERIFY1 = 1;      // 审核通过    const VERIFY0 = 0;      // 审核失败    const VERIFY10 = 10;    // 等待审核    /**     * 新增商品数据     *     * @param array $insert 数据     * @param string $table 表名     */    public function addGoods($insert) {        $result = $this->table('zero_goods')->insert($insert);        if ($result) {            $this->_dGoodsCache($result);//            $this->_dGoodsCommonCache($insert['goods_commonid']);////            $this->_dGoodsSpecCache($insert['goods_commonid']);        }        return $result;    }    /**     * 商品SKU列表     *     * @param array $condition 条件     * @param string $field 字段     * @param string $group 分组     * @param string $order 排序     * @param int $limit 限制     * @param int $page 分页     * @param boolean $lock 是否锁定     * @return array 二维数组     */    public function getGoodsList($condition, $field = '*', $group = '',$order = '', $limit = 0, $page = 0, $lock = false, $count = 0) {        return $this->table('zero_goods')->field($field)->where($condition)->group($group)->order($order)->limit($limit)->page($page, $count)->lock($lock)->select();    }    /**     * 在售商品SKU列表     *     * @param array $condition 条件     * @param string $field 字段     * @param string $group 分组     * @param string $order 排序     * @param int $limit 限制     * @param int $page 分页     * @param boolean $lock 是否锁定     * @return array     */    public function getGoodsOnlineList($condition, $field = '*', $page = 0, $order = 'goods_id desc', $limit = 0, $group = '', $lock = false, $count = 0) {        $condition['goods_state']   = self::STATE1;        $condition['goods_verify']  = self::VERIFY1;        return $this->getGoodsList($condition, $field, $group, $order, $limit, $page, $lock, $count);    }    /**     * 更新商品SUK数据     *     * @param array $update 更新数据     * @param array $condition 条件     * @return boolean     */    public function editGoods($update, $condition) {        $goods_list = $this->getGoodsList($condition, 'goods_id');        if (empty($goods_list)) {            return true;        }        $goodsid_array = array();        foreach ($goods_list as $value) {            $goodsid_array[] = $value['goods_id'];        }        return $this->editGoodsById($update, $goodsid_array);    }    /**     * 修改商品剩余数量 与 库存     * @param type $goods_id     * @param type $goods_number     */    public function editGoodsProcess($goods_id,$goods_number) {        $condition['goods_state']   = self::STATE1;        $condition['goods_verify']  = self::VERIFY1;        $condition['goods_id'] = $goods_id;        $update['goods_progress'] = 'FLOOR((goods_join_num + '.$goods_number.')/goods_total_num)';        $update['goods_join_num'] = array('exp', 'goods_join_num + '.$goods_number);        $update['goods_surplus_num'] = array('exp', 'goods_surplus_num - '.$goods_number);        $update['goods_storage'] = array('exp', 'goods_storage - '.$goods_number);        $result = $this->table('zero_goods')->where($condition)->update($update);        if ($result) {            $this->_dGoodsCache($goods_id);        }        return $result;    }    /**     * 更新商品SUK数据     * @param array $update     * @param int|array $goodsid_array     * @return boolean|unknown     */    public function editGoodsById($update, $goodsid_array) {        if (empty($goodsid_array)) {            return true;        }        $condition['goods_id'] = array('in', $goodsid_array);        $update['goods_edittime'] = TIMESTAMP;        $result = $this->table('zero_goods')->where($condition)->update($update);        if ($result) {            foreach ((array)$goodsid_array as $value) {                $this->_dGoodsCache($value);            }        }        return $result;    }    /**     * 获取单条商品SKU信息     *     * @param array $condition     * @param string $field     * @return array     */    public function getGoodsInfo($condition, $field = '*') {        $info = $this->table('zero_goods')->field($field)->where($condition)->find();        if($info){//            $info['goods_detail'] = html_entity_decode($info['goods_detail']);        }        return $info;    }    /**     * 获得商品SKU某字段的和     *     * @param array $condition     * @param string $field     * @return boolean     */    public function getGoodsSum($condition, $field) {        return $this->table('zero_goods')->where($condition)->sum($field);    }    /**     * 获得商品SKU数量     *     * @param array $condition     * @param string $field     * @return int     */    public function getGoodsCount($condition) {        return $this->table('zero_goods')->where($condition)->count();    }    /**     * 获得出售中商品SKU数量     *     * @param array $condition     * @param string $field     * @return int     */    public function getGoodsOnlineCount($condition, $field = '*') {        $condition['goods_state']   = self::STATE1;        $condition['goods_verify']  = self::VERIFY1;        return $this->table('zero_goods')->where($condition)->group('')->count1($field);    }    /**     * 删除商品SKU信息     *     * @param array $condition     * @return boolean     */    public function delGoods($condition) {        $goods_list = $this->getGoodsList($condition, '*');        if (!empty($goods_list)) {            $goodsid_array = array();            // 删除商品二维码            foreach ($goods_list as $val) {                $goodsid_array[] = $val['goods_id'];                //删除主图                if (!empty($val['goods_image_index'])){                    @unlink(BASE_UPLOAD_PATH.DS.$val['goods_image_index']);                }                //删除轮播图                if (!empty($val['goods_image_list'])){                    $lb_img_list = explode(';', $val['goods_image_list']);                    foreach ($lb_img_list as $gv) {                        @unlink(BASE_UPLOAD_PATH.DS.$gv);                    }                }                // 删除商品缓存                $this->_dGoodsCache($val['goods_id']);            }        }        return $this->table('zero_goods')->where($condition)->delete();    }    /**     * 发送店铺消息     * @param string $code     * @param int $store_id     * @param array $param     */    private function _sendStoreMsg($code, $store_id, $param) {        QueueClient::push('sendStoreMsg', array('code' => $code, 'store_id' => $store_id, 'param' => $param));    }    /**     * 取得商品详细信息（优先查询缓存）（在售）     * 如果未找到，则缓存所有字段     * @param int $goods_id     * @param string $field 需要取得的缓存键值, 例如：'*','goods_name,store_name'     * @return array     */    public function getGoodsOnlineInfoByID($goods_id, $field = '*') {        if ($field != '*') {            $field .= ',goods_state,goods_verify';        }        $goods_info = $this->getGoodsInfoByID($goods_id,trim($field,','));        if ($goods_info['goods_state'] != self::STATE1 || $goods_info['goods_verify'] != self::VERIFY1) {            $goods_info = array();        }        return $goods_info;    }    /**     * 取得商品详细信息（优先查询缓存）     * 如果未找到，则缓存所有字段     * @param int $goods_id     * @param string $fields 需要取得的缓存键值, 例如：'*','goods_name,store_name'     * @return array     */    public function getGoodsInfoByID($goods_id, $fields = '*') {        $goods_info = $this->_rGoodsCache($goods_id, $fields);        if (empty($goods_info)) {            $goods_info = $this->getGoodsInfo(array('goods_id'=>$goods_id));            $this->_wGoodsCache($goods_id, $goods_info);        }        return $goods_info;    }    /**     * 读取商品缓存     * @param int $goods_id     * @param string $fields     * @return array     */    private function _rGoodsCache($goods_id, $fields) {        return rcache($goods_id, 'goods', $fields);    }    /**     * 写入商品缓存     * @param int $goods_id     * @param array $goods_info     * @return boolean     */    private function _wGoodsCache($goods_id, $goods_info) {        return wcache($goods_id, $goods_info, 'goods');    }    /**     * 删除商品缓存     * @param int $goods_id     * @return boolean     */    private function _dGoodsCache($goods_id) {        return dcache($goods_id, 'goods');    }    /**     * 获取单条商品信息     *     * @param int $goods_id     * @return array     */    public function getGoodsDetail($goods_id) {        if($goods_id <= 0) {            return null;        }        $goods_info = $this->getGoodsInfoByID($goods_id);        // 商品多图        $goods_info['goods_image_list'] = explode(';', $goods_info['goods_image_list']);        if(is_array($goods_info['goods_image_list'])){            foreach ($goods_info['goods_image_list'] as $k => $v) {                $goods_info['goods_image_list'][$k] = UPLOAD_SITE_URL.DS.$v;            }        }        // 商品受关注次数加1        $this->editGoodsById(array('goods_click' => array('exp', 'goods_click + 1')), $goods_id);        return $goods_info;    }}